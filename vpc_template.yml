Description: Create VPC and 2 public subnets,2 private subnets,route tables,internet gateway,nat gateway. 
Parameters:
  demoVPCCIDR:
    Type: String
    Description: Please enter CIDR for VPC.

  PublicSubnet1CIDR:
    Type: String
    Description: Please enter Public Subnet1 CIDR
  PublicSubnet1AZ:
    Type: String
    Description: Please enter AZ for public subnet1.

  PublicSubnet2CIDR:
    Type: String
    Description: Please enter Public Subnet2 CIDR
  PublicSubnet2AZ:
    Type: String
    Description: Please enter AZ for public subnet2.

  PrivateSubnet1CIDR:
    Type: String
    Description: Please enter Private Subnet1 CIDR
  PrivateSubnet1AZ:
    Type: String
    
    Description: Please enter AZ for private subnet1.

  PrivateSubnet2CIDR:
    Type: String
    
    Description: Please enter Private Subnet2 CIDR.
  PrivateSubnet2AZ:
    Type: String
    Description: Please enter AZ for private subnet2.

Resources:
  demoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref demoVPCCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: demoVPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref demoVPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref PublicSubnet1AZ
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref demoVPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref PublicSubnet2AZ
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref demoVPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Ref PrivateSubnet1AZ
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref demoVPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Ref PrivateSubnet2AZ
      Tags:
        - Key: Name
          Value: PrivateSubnet2
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref demoVPC
      Tags:
        - Key: Name
          Value: Public RT1
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref demoVPC
      Tags:
        - Key: Name
          Value: Private RT1
  
  PublicSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnet1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: demoIGW

  IGWtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref demoVPC
      InternetGatewayId: !Ref InternetGateway
    
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWtoVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    
  ElasticIP1:
      Type: AWS::EC2::EIP
      DependsOn: demoVPC
      Properties:
        Domain: vpc
    
  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIP1
    Properties: 
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt ElasticIP1.AllocationId
    
  ElasticIP2:
    Type: AWS::EC2::EIP
    DependsOn: demoVPC
    Properties:
      Domain: vpc
    
  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIP2
    Properties: 
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt ElasticIP2.AllocationId
    
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  SSMInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcId: !Ref demoVPC
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  
  CodeBuildInterfaceEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.codebuild'
      VpcId: !Ref demoVPC
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Gateway'
      VpcId: !Ref demoVPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource:
              - 'arn:aws:s3:::taskbucket-111007121372/*'
      RouteTableIds:
        - !Ref PrivateRouteTable
  



